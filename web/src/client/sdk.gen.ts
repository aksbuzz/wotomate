// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  PostApiAuthRegisterData,
  PostApiAuthRegisterResponse,
  PostApiAuthRegisterError,
  PostApiAuthLoginData,
  PostApiAuthLoginResponse,
  PostApiAuthLoginError,
  GetApiAuthMeData,
  GetApiAuthMeResponse,
  GetApiAuthMeError,
  GetApiConnectorsDefinitionsData,
  GetApiConnectorsDefinitionsResponse,
  GetApiConnectorsDefinitionsError,
  GetApiConnectorsDefinitionsByConnectorKeyTriggersData,
  GetApiConnectorsDefinitionsByConnectorKeyTriggersResponse,
  GetApiConnectorsDefinitionsByConnectorKeyTriggersError,
  GetApiConnectorsDefinitionsByConnectorKeyActionsData,
  GetApiConnectorsDefinitionsByConnectorKeyActionsResponse,
  GetApiConnectorsDefinitionsByConnectorKeyActionsError,
  GetApiConnectorsData,
  GetApiConnectorsResponse,
  GetApiConnectorsStatusByConnectorKeyData,
  GetApiConnectorsStatusByConnectorKeyResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Register a new user
 */
export const postApiAuthRegister = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAuthRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthRegisterResponse,
    PostApiAuthRegisterError,
    ThrowOnError
  >({
    url: "/api/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login and receive access token
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthLoginResponse,
    PostApiAuthLoginError,
    ThrowOnError
  >({
    url: "/api/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get current user info
 */
export const getApiAuthMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthMeResponse,
    GetApiAuthMeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/auth/me",
    ...options,
  });
};

/**
 * Get all connector definitions
 */
export const getApiConnectorsDefinitions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiConnectorsDefinitionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiConnectorsDefinitionsResponse,
    GetApiConnectorsDefinitionsError,
    ThrowOnError
  >({
    url: "/api/connectors/definitions",
    ...options,
  });
};

/**
 * Get trigger definitions for a connector
 */
export const getApiConnectorsDefinitionsByConnectorKeyTriggers = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiConnectorsDefinitionsByConnectorKeyTriggersData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiConnectorsDefinitionsByConnectorKeyTriggersResponse,
    GetApiConnectorsDefinitionsByConnectorKeyTriggersError,
    ThrowOnError
  >({
    url: "/api/connectors/definitions/{connector_key}/triggers",
    ...options,
  });
};

/**
 * Get action definitions for a connector
 */
export const getApiConnectorsDefinitionsByConnectorKeyActions = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiConnectorsDefinitionsByConnectorKeyActionsData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiConnectorsDefinitionsByConnectorKeyActionsResponse,
    GetApiConnectorsDefinitionsByConnectorKeyActionsError,
    ThrowOnError
  >({
    url: "/api/connectors/definitions/{connector_key}/actions",
    ...options,
  });
};

/**
 * Get connectors for current user
 */
export const getApiConnectors = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiConnectorsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiConnectorsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/connectors/",
    ...options,
  });
};

/**
 * Check connection status for a connector
 */
export const getApiConnectorsStatusByConnectorKey = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiConnectorsStatusByConnectorKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiConnectorsStatusByConnectorKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/connectors/status/{connector_key}",
    ...options,
  });
};
