// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  postApiAuthRegister,
  postApiAuthLogin,
  getApiAuthMe,
  getApiConnectorsDefinitions,
  getApiConnectorsDefinitionsByConnectorKeyTriggers,
  getApiConnectorsDefinitionsByConnectorKeyActions,
  getApiConnectors,
  getApiConnectorsStatusByConnectorKey,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  PostApiAuthRegisterData,
  PostApiAuthRegisterError,
  PostApiAuthRegisterResponse,
  PostApiAuthLoginData,
  PostApiAuthLoginError,
  PostApiAuthLoginResponse,
  GetApiAuthMeData,
  GetApiConnectorsDefinitionsData,
  GetApiConnectorsDefinitionsByConnectorKeyTriggersData,
  GetApiConnectorsDefinitionsByConnectorKeyActionsData,
  GetApiConnectorsData,
  GetApiConnectorsStatusByConnectorKeyData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const postApiAuthRegisterQueryKey = (
  options: Options<PostApiAuthRegisterData>,
) => createQueryKey("postApiAuthRegister", options);

/**
 * Register a new user
 */
export const postApiAuthRegisterOptions = (
  options: Options<PostApiAuthRegisterData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthRegisterQueryKey(options),
  });
};

/**
 * Register a new user
 */
export const postApiAuthRegisterMutation = (
  options?: Partial<Options<PostApiAuthRegisterData>>,
): UseMutationOptions<
  PostApiAuthRegisterResponse,
  PostApiAuthRegisterError,
  Options<PostApiAuthRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthRegisterResponse,
    PostApiAuthRegisterError,
    Options<PostApiAuthRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthLoginQueryKey = (
  options: Options<PostApiAuthLoginData>,
) => createQueryKey("postApiAuthLogin", options);

/**
 * Login and receive access token
 */
export const postApiAuthLoginOptions = (
  options: Options<PostApiAuthLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthLoginQueryKey(options),
  });
};

/**
 * Login and receive access token
 */
export const postApiAuthLoginMutation = (
  options?: Partial<Options<PostApiAuthLoginData>>,
): UseMutationOptions<
  PostApiAuthLoginResponse,
  PostApiAuthLoginError,
  Options<PostApiAuthLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthLoginResponse,
    PostApiAuthLoginError,
    Options<PostApiAuthLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthMeQueryKey = (options?: Options<GetApiAuthMeData>) =>
  createQueryKey("getApiAuthMe", options);

/**
 * Get current user info
 */
export const getApiAuthMeOptions = (options?: Options<GetApiAuthMeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthMeQueryKey(options),
  });
};

export const getApiConnectorsDefinitionsQueryKey = (
  options?: Options<GetApiConnectorsDefinitionsData>,
) => createQueryKey("getApiConnectorsDefinitions", options);

/**
 * Get all connector definitions
 */
export const getApiConnectorsDefinitionsOptions = (
  options?: Options<GetApiConnectorsDefinitionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConnectorsDefinitions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConnectorsDefinitionsQueryKey(options),
  });
};

export const getApiConnectorsDefinitionsByConnectorKeyTriggersQueryKey = (
  options: Options<GetApiConnectorsDefinitionsByConnectorKeyTriggersData>,
) =>
  createQueryKey("getApiConnectorsDefinitionsByConnectorKeyTriggers", options);

/**
 * Get trigger definitions for a connector
 */
export const getApiConnectorsDefinitionsByConnectorKeyTriggersOptions = (
  options: Options<GetApiConnectorsDefinitionsByConnectorKeyTriggersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConnectorsDefinitionsByConnectorKeyTriggers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      getApiConnectorsDefinitionsByConnectorKeyTriggersQueryKey(options),
  });
};

export const getApiConnectorsDefinitionsByConnectorKeyActionsQueryKey = (
  options: Options<GetApiConnectorsDefinitionsByConnectorKeyActionsData>,
) =>
  createQueryKey("getApiConnectorsDefinitionsByConnectorKeyActions", options);

/**
 * Get action definitions for a connector
 */
export const getApiConnectorsDefinitionsByConnectorKeyActionsOptions = (
  options: Options<GetApiConnectorsDefinitionsByConnectorKeyActionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConnectorsDefinitionsByConnectorKeyActions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConnectorsDefinitionsByConnectorKeyActionsQueryKey(options),
  });
};

export const getApiConnectorsQueryKey = (
  options?: Options<GetApiConnectorsData>,
) => createQueryKey("getApiConnectors", options);

/**
 * Get connectors for current user
 */
export const getApiConnectorsOptions = (
  options?: Options<GetApiConnectorsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConnectors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConnectorsQueryKey(options),
  });
};

export const getApiConnectorsStatusByConnectorKeyQueryKey = (
  options: Options<GetApiConnectorsStatusByConnectorKeyData>,
) => createQueryKey("getApiConnectorsStatusByConnectorKey", options);

/**
 * Check connection status for a connector
 */
export const getApiConnectorsStatusByConnectorKeyOptions = (
  options: Options<GetApiConnectorsStatusByConnectorKeyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConnectorsStatusByConnectorKey({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConnectorsStatusByConnectorKeyQueryKey(options),
  });
};
