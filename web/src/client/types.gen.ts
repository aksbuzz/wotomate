// This file is auto-generated by @hey-api/openapi-ts

export type UserCredentials = {
  email: string;
  password: string;
};

export type UserInfo = {
  id?: number;
  email?: string;
};

export type ConnectorDefinition = {
  id?: number;
  key?: string;
  display_name?: string;
  description?: string;
  auth_type?: string;
  connector_config_schema?: {
    [key: string]: unknown;
  };
  logo_url?: string;
};

export type TriggerDefinition = {
  id?: number;
  key?: string;
  display_name?: string;
  description?: string;
  config_schema?: {
    [key: string]: unknown;
  };
  output_schema?: {
    [key: string]: unknown;
  };
  requires_webhook_endpoint?: boolean;
  service_key?: string;
  service_display_name?: string;
};

export type ActionDefinition = {
  id?: number;
  key?: string;
  display_name?: string;
  description?: string;
  config_schema?: {
    [key: string]: unknown;
  };
  input_schema?: {
    [key: string]: unknown;
  };
  output_schema?: {
    [key: string]: unknown;
  };
  service_key?: string;
  service_display_name?: string;
};

export type Connector = {
  id?: number;
  connector_key?: string;
  connection_name?: string;
  created_at?: string;
  updated_at?: string;
};

export type ConnectionStatus = {
  connected?: boolean;
  id?: number;
  connection_name?: string;
  connector_key?: string;
};

export type SuccessResponse = {
  msg?: string;
};

export type ErrorResponse = {
  err?: string;
};

export type PostApiAuthRegisterData = {
  body: UserCredentials;
  path?: never;
  query?: never;
  url: "/api/auth/register";
};

export type PostApiAuthRegisterErrors = {
  /**
   * Invalid input or user exists
   */
  400: ErrorResponse;
};

export type PostApiAuthRegisterError =
  PostApiAuthRegisterErrors[keyof PostApiAuthRegisterErrors];

export type PostApiAuthRegisterResponses = {
  /**
   * User created
   */
  201: SuccessResponse;
};

export type PostApiAuthRegisterResponse =
  PostApiAuthRegisterResponses[keyof PostApiAuthRegisterResponses];

export type PostApiAuthLoginData = {
  body: UserCredentials;
  path?: never;
  query?: never;
  url: "/api/auth/login";
};

export type PostApiAuthLoginErrors = {
  /**
   * Missing credentials
   */
  400: ErrorResponse;
  /**
   * Invalid credentials
   */
  401: ErrorResponse;
};

export type PostApiAuthLoginError =
  PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
  /**
   * Login successful
   */
  200: {
    access_token?: string;
    user_id?: number;
    email?: string;
  };
};

export type PostApiAuthLoginResponse =
  PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];

export type GetApiAuthMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/me";
};

export type GetApiAuthMeErrors = {
  /**
   * User not found
   */
  404: ErrorResponse;
};

export type GetApiAuthMeError = GetApiAuthMeErrors[keyof GetApiAuthMeErrors];

export type GetApiAuthMeResponses = {
  /**
   * User info
   */
  200: UserInfo;
};

export type GetApiAuthMeResponse =
  GetApiAuthMeResponses[keyof GetApiAuthMeResponses];

export type GetApiConnectorsDefinitionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/connectors/definitions";
};

export type GetApiConnectorsDefinitionsErrors = {
  /**
   * No connector definitions found
   */
  404: ErrorResponse;
};

export type GetApiConnectorsDefinitionsError =
  GetApiConnectorsDefinitionsErrors[keyof GetApiConnectorsDefinitionsErrors];

export type GetApiConnectorsDefinitionsResponses = {
  /**
   * List of connector definitions
   */
  200: {
    data?: Array<ConnectorDefinition>;
  };
};

export type GetApiConnectorsDefinitionsResponse =
  GetApiConnectorsDefinitionsResponses[keyof GetApiConnectorsDefinitionsResponses];

export type GetApiConnectorsDefinitionsByConnectorKeyTriggersData = {
  body?: never;
  path: {
    connector_key: string;
  };
  query?: never;
  url: "/api/connectors/definitions/{connector_key}/triggers";
};

export type GetApiConnectorsDefinitionsByConnectorKeyTriggersErrors = {
  /**
   * Connector not found
   */
  404: ErrorResponse;
};

export type GetApiConnectorsDefinitionsByConnectorKeyTriggersError =
  GetApiConnectorsDefinitionsByConnectorKeyTriggersErrors[keyof GetApiConnectorsDefinitionsByConnectorKeyTriggersErrors];

export type GetApiConnectorsDefinitionsByConnectorKeyTriggersResponses = {
  /**
   * Trigger definitions
   */
  200: Array<TriggerDefinition>;
};

export type GetApiConnectorsDefinitionsByConnectorKeyTriggersResponse =
  GetApiConnectorsDefinitionsByConnectorKeyTriggersResponses[keyof GetApiConnectorsDefinitionsByConnectorKeyTriggersResponses];

export type GetApiConnectorsDefinitionsByConnectorKeyActionsData = {
  body?: never;
  path: {
    connector_key: string;
  };
  query?: never;
  url: "/api/connectors/definitions/{connector_key}/actions";
};

export type GetApiConnectorsDefinitionsByConnectorKeyActionsErrors = {
  /**
   * Connector not found
   */
  404: ErrorResponse;
};

export type GetApiConnectorsDefinitionsByConnectorKeyActionsError =
  GetApiConnectorsDefinitionsByConnectorKeyActionsErrors[keyof GetApiConnectorsDefinitionsByConnectorKeyActionsErrors];

export type GetApiConnectorsDefinitionsByConnectorKeyActionsResponses = {
  /**
   * Action definitions
   */
  200: Array<ActionDefinition>;
};

export type GetApiConnectorsDefinitionsByConnectorKeyActionsResponse =
  GetApiConnectorsDefinitionsByConnectorKeyActionsResponses[keyof GetApiConnectorsDefinitionsByConnectorKeyActionsResponses];

export type GetApiConnectorsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/connectors/";
};

export type GetApiConnectorsResponses = {
  /**
   * User connectors
   */
  200: Array<Connector>;
};

export type GetApiConnectorsResponse =
  GetApiConnectorsResponses[keyof GetApiConnectorsResponses];

export type GetApiConnectorsStatusByConnectorKeyData = {
  body?: never;
  path: {
    connector_key: string;
  };
  query?: never;
  url: "/api/connectors/status/{connector_key}";
};

export type GetApiConnectorsStatusByConnectorKeyResponses = {
  /**
   * Connection status
   */
  200: ConnectionStatus;
};

export type GetApiConnectorsStatusByConnectorKeyResponse =
  GetApiConnectorsStatusByConnectorKeyResponses[keyof GetApiConnectorsStatusByConnectorKeyResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:5000" | (string & {});
};
