/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as EditorWorkflowIdImport } from './routes/editor/$workflowId'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutRunsImport } from './routes/_layout/runs'
import { Route as LayoutFlowsImport } from './routes/_layout/flows'
import { Route as LayoutConnectorsImport } from './routes/_layout/connectors'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const EditorWorkflowIdRoute = EditorWorkflowIdImport.update({
  id: '/editor/$workflowId',
  path: '/editor/$workflowId',
  getParentRoute: () => rootRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRunsRoute = LayoutRunsImport.update({
  id: '/runs',
  path: '/runs',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFlowsRoute = LayoutFlowsImport.update({
  id: '/flows',
  path: '/flows',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutConnectorsRoute = LayoutConnectorsImport.update({
  id: '/connectors',
  path: '/connectors',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/connectors': {
      id: '/_layout/connectors'
      path: '/connectors'
      fullPath: '/connectors'
      preLoaderRoute: typeof LayoutConnectorsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/flows': {
      id: '/_layout/flows'
      path: '/flows'
      fullPath: '/flows'
      preLoaderRoute: typeof LayoutFlowsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/runs': {
      id: '/_layout/runs'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof LayoutRunsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/editor/$workflowId': {
      id: '/editor/$workflowId'
      path: '/editor/$workflowId'
      fullPath: '/editor/$workflowId'
      preLoaderRoute: typeof EditorWorkflowIdImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutConnectorsRoute: typeof LayoutConnectorsRoute
  LayoutFlowsRoute: typeof LayoutFlowsRoute
  LayoutRunsRoute: typeof LayoutRunsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutConnectorsRoute: LayoutConnectorsRoute,
  LayoutFlowsRoute: LayoutFlowsRoute,
  LayoutRunsRoute: LayoutRunsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/connectors': typeof LayoutConnectorsRoute
  '/flows': typeof LayoutFlowsRoute
  '/runs': typeof LayoutRunsRoute
  '/settings': typeof LayoutSettingsRoute
  '/editor/$workflowId': typeof EditorWorkflowIdRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/connectors': typeof LayoutConnectorsRoute
  '/flows': typeof LayoutFlowsRoute
  '/runs': typeof LayoutRunsRoute
  '/settings': typeof LayoutSettingsRoute
  '/editor/$workflowId': typeof EditorWorkflowIdRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_layout/connectors': typeof LayoutConnectorsRoute
  '/_layout/flows': typeof LayoutFlowsRoute
  '/_layout/runs': typeof LayoutRunsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/editor/$workflowId': typeof EditorWorkflowIdRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/connectors'
    | '/flows'
    | '/runs'
    | '/settings'
    | '/editor/$workflowId'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/signup'
    | '/connectors'
    | '/flows'
    | '/runs'
    | '/settings'
    | '/editor/$workflowId'
    | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/signup'
    | '/_layout/connectors'
    | '/_layout/flows'
    | '/_layout/runs'
    | '/_layout/settings'
    | '/editor/$workflowId'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  EditorWorkflowIdRoute: typeof EditorWorkflowIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  EditorWorkflowIdRoute: EditorWorkflowIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login",
        "/signup",
        "/editor/$workflowId"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/connectors",
        "/_layout/flows",
        "/_layout/runs",
        "/_layout/settings",
        "/_layout/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_layout/connectors": {
      "filePath": "_layout/connectors.tsx",
      "parent": "/_layout"
    },
    "/_layout/flows": {
      "filePath": "_layout/flows.tsx",
      "parent": "/_layout"
    },
    "/_layout/runs": {
      "filePath": "_layout/runs.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/editor/$workflowId": {
      "filePath": "editor/$workflowId.tsx"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
